apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: project-v4-multigroup
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: project-v4-multigroup
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
      app.kubernetes.io/name: project-v4-multigroup
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: project-v4-multigroup
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      # TODO(user): Uncomment the following code to configure the nodeSelector expression
      # annotations, nodeSelector, tolerations, topologySpreadConstraints.
      # nodeSelector:
      #   disktype: ssd
      # Annotations for the manager pod
      # annotations:
      #   example-annotation: "value"
      # Node selector for scheduling the manager pod
      # nodeSelector:
      #   disktype: ssd
      # Tolerations for the manager pod
      # tolerations:
      #   - key: "key1"
      #     operator: "Equal"
      #     value: "value1"
      #     effect: "NoSchedule"
      # Topology spread constraints for the manager pod
      # topologySpreadConstraints:
      #   - maxSkew: 1
      #     topologyKey: "topology.kubernetes.io/zone"
      #     whenUnsatisfiable: "ScheduleAnyway"
      #     labelSelector:
      #       matchLabels:
      #         app: controller-manager
      # imagePullSecrets for pulling images from private registries
      # imagePullSecrets:
      #   - name: myregistrykey
      securityContext:
        # Projects are configured by default to adhere to the "restricted" Pod Security Standards.
        # This ensures that deployments meet the highest security requirements for Kubernetes.
        # For more details, see: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - command:
        - /manager
        args:
          - --leader-elect
          - --health-probe-bind-address=:8081
        image: controller:latest
        name: manager
        env:
        - name: BUSYBOX_IMAGE
          value: busybox:1.36.1
        - name: MEMCACHED_IMAGE
          value: memcached:1.6.26-alpine3.19
        # imagePullPolicy for the manager container (e.g., Always, IfNotPresent, Never)
        # imagePullPolicy: IfNotPresent
        ports: []
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        # Extra volumeMounts for the manager container
        # volumeMounts:
        #   - name: extra-config
        #     mountPath: /etc/extra
        volumeMounts: []
      # Extra volumes for the manager pod
      # volumes:
      #   - name: extra-config
      #     configMap:
      #       name: extra-config
      volumes: []
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
